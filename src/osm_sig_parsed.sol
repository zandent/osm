

// along with this program.  If not, see <https:

pragma solidity >=0.5.10;

import "ds-value/value.sol";

contract LibNote {
    event LogNote(
        bytes4   indexed  sig,
        address  indexed  usr,
        bytes32  indexed  arg1,
        bytes32  indexed  arg2,
        bytes             data
    ) anonymous;

    modifier note {
        _;
        assembly {
            
            
            let mark := msize()                       
            mstore(0x40, add(mark, 288))              
            mstore(mark, 0x20)                        
            mstore(add(mark, 0x20), 224)              
            calldatacopy(add(mark, 0x40), 0, 224)     
            log4(mark, 288,                           
                 shl(224, shr(224, calldataload(0))), 
                 caller(),                            
                 calldataload(4),                     
                 calldataload(36)                     
                )
        }
    }
constructor() public {
}
}

contract OSM is LibNote {

    
    mapping (address => uint) public wards;
    function rely(address usr) external note auth { wards[usr] = 1; }
    function deny(address usr) external note auth { wards[usr] = 0; }
    modifier auth {
        require(wards[msg.sender] == 1, "OSM/not-authorized");
        _;
    }

    
    uint256 public stopped;
    modifier stoppable { require(stopped == 0, "OSM/is-stopped"); _; }

    
    function add(uint64 x, uint64 y) internal pure returns (uint64 z) {
        z = x + y;
        require(z >= x);
    }

    address public src;
    uint16  constant ONE_HOUR = uint16(100);
    uint16  constant ONE_HOUR_FOR_EMITSIG_DELAY= 100;
    uint16  public hop = ONE_HOUR;
    uint64  public zzz;

    struct Feed {
        uint128 val;
        uint128 has;
    }

    Feed cur;
    Feed nxt;

    
    mapping (address => uint256) public bud;

    modifier toll { require(bud[msg.sender] == 1, "OSM/contract-not-whitelisted"); _; }

    event LogValue(bytes32 val);

    function stop() external note auth {
        stopped = 1;
    }
    function start() external note auth {
        stopped = 0;
    }

    function change(address src_) external note auth {
        src = src_;
    }

    function era() internal view returns (uint) {
        return block.timestamp;
    }

    function prev(uint ts) internal view returns (uint64) {
        require(hop != 0, "OSM/hop-is-zero");
        return uint64(ts - (ts % hop));
    }

    function step(uint16 ts) external auth {
        require(ts > 0, "OSM/ts-is-zero");
        hop = ts;
    }

    function void() external note auth {
        cur = nxt = Feed(0, 0);
        stopped = 1;
    }

    function pass() public view returns (bool ok) {
        return era() >= add(zzz, hop);
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////
    // GENERATED BY SIGNALSLOT PARSER
    
    // Original Code:
    // signal PriceFeedUpdate;

    // TODO: Arguments should not be limited to one 32 byte value

    // Generated variables that represent the signal
	bytes32 private PriceFeedUpdate_data;
	bytes32 private PriceFeedUpdate_dataslot;
	uint private PriceFeedUpdate_status;
    bytes32 private PriceFeedUpdate_key;

    // Set the data to be emitted
	function set_PriceFeedUpdate_data(bytes32  dataSet) private {
       PriceFeedUpdate_data = dataSet;
    }

    // Get the argument count
	function get_PriceFeedUpdate_is_fix() public pure returns (uint is_fix) {
       return 5 + 256*32;
    }

    // Get the signal key
	function get_PriceFeedUpdate_key() public view returns (bytes32 key) {
       return PriceFeedUpdate_key;
    }

    // Get the data slot
    function get_PriceFeedUpdate_dataslot() public view returns (bytes32 dataslot) {
       return PriceFeedUpdate_dataslot;
    }

    // signal PriceFeedUpdate construction
    // This should be called once in the contract construction.
    // This parser should automatically call it.
    function PriceFeedUpdate() private {
        PriceFeedUpdate_key = keccak256("PriceFeedUpdate()");
		assembly {
			sstore(PriceFeedUpdate_status_slot, createsig(5, sload(PriceFeedUpdate_key_slot)))
			sstore(PriceFeedUpdate_dataslot_slot, PriceFeedUpdate_data_slot)
		}
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////


    //////////////////////////////////////////////////////////////////////////////////////////////////
    // GENERATED BY SIGNALSLOT PARSER

    // Original Code:
    // handler SendUpdate {...}

    // Generated variables that represent the slot
    uint private SendUpdate_status;
    bytes32 private SendUpdate_key;

    // Get the signal key
	function get_SendUpdate_key() public view returns (bytes32 key) {
       return SendUpdate_key;
    }

    // SendUpdate construction
    // Should be called once in the contract construction
    function SendUpdate() private {
        SendUpdate_key = keccak256("SendUpdate_func(bytes32)");
        assembly {
            sstore(SendUpdate_status_slot, createslot(1, 10, 30000, sload(SendUpdate_key_slot)))
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////

    // SendUpdate code to be executed
    // The slot is converted to a function that will be called in slot transactions.
    function SendUpdate_func(bytes32 unused)  public  {
        
        
        bytes32 wut = bytes32(uint(unused) + 1);
        bool ok = true;
        if (ok) {
            cur = nxt;
            nxt = Feed(uint128(uint(wut)), 1);
            zzz = prev(era());
            emit LogValue(bytes32(uint(cur.val)));
            bytes32 price = wut;
        //////////////////////////////////////////////////////////////////////////////////////////////////
        // GENERATED BY SIGNALSLOT PARSER
        
        // Original Code:
        // emitsig PriceFeedUpdate(price).delay(20)

        // Set the data field in the signal
        set_PriceFeedUpdate_data(price);
        // Get the argument count
        uint this_emitsig_PriceFeedUpdate_is_fix = get_PriceFeedUpdate_is_fix();
        // Get the data slot
		bytes32 this_emitsig_PriceFeedUpdate_dataslot = get_PriceFeedUpdate_dataslot();
        // Get the signal key
		bytes32 this_emitsig_PriceFeedUpdate_key = get_PriceFeedUpdate_key();
        // Use assembly to emit the signal and queue up slot transactions
		assembly {
			mstore(0x40, emitsig(this_emitsig_PriceFeedUpdate_key, 20, this_emitsig_PriceFeedUpdate_dataslot, this_emitsig_PriceFeedUpdate_is_fix))
	    }
        //////////////////////////////////////////////////////////////////////////////////////////////////

        }
    }

    function peek() external view toll returns (bytes32,bool) {
        return (bytes32(uint(cur.val)), cur.has == 1);
    }

    function peep() external view toll returns (bytes32,bool) {
        return (bytes32(uint(nxt.val)), nxt.has == 1);
    }

    function read() external view toll returns (bytes32) {
        require(cur.has == 1, "OSM/no-current-value");
        return (bytes32(uint(cur.val)));
    }



    function kiss(address a) external note auth {
        require(a != address(0), "OSM/no-contract-0");
        bud[a] = 1;
    }

    function diss(address a) external note auth {
        bud[a] = 0;
    }

    function kiss(address[] calldata a) external note auth {
        for(uint i = 0; i < a.length; i++) {
            require(a[i] != address(0), "OSM/no-contract-0");
            bud[a[i]] = 1;
        }
    }

    function diss(address[] calldata a) external note auth {
        for(uint i = 0; i < a.length; i++) {
            bud[a[i]] = 0;
        }
    }

    function startPriceUpdate() public{
        //////////////////////////////////////////////////////////////////////////////////////////////////
        // GENERATED BY SIGNALSLOT PARSER
        
        // Original Code:
        // emitsig PriceFeedUpdate(0).delay(10)

        // Set the data field in the signal
        set_PriceFeedUpdate_data(0);
        // Get the argument count
        uint this_emitsig_PriceFeedUpdate_is_fix = get_PriceFeedUpdate_is_fix();
        // Get the data slot
		bytes32 this_emitsig_PriceFeedUpdate_dataslot = get_PriceFeedUpdate_dataslot();
        // Get the signal key
		bytes32 this_emitsig_PriceFeedUpdate_key = get_PriceFeedUpdate_key();
        // Use assembly to emit the signal and queue up slot transactions
		assembly {
			mstore(0x40, emitsig(this_emitsig_PriceFeedUpdate_key, 10, this_emitsig_PriceFeedUpdate_dataslot, this_emitsig_PriceFeedUpdate_is_fix))
	    }
        //////////////////////////////////////////////////////////////////////////////////////////////////

    }

    function getCurrentPrice() public returns (bytes32){
        return bytes32(uint(cur.val));
    }

    
    constructor(address src_) public {
   PriceFeedUpdate();
   SendUpdate();
        wards[msg.sender] = 1;
        src = src_;
        
        
        //////////////////////////////////////////////////////////////////////////////////////////////////
        // GENERATED BY SIGNALSLOT PARSER

        // Original Code:
        // SendUpdate.bind(this.PriceFeedUpdate)

        // Convert to address
		address this_bindslot_address = address(this);
        // Get signal key from emitter contract
		bytes32 this_bindslot_PriceFeedUpdate_key = keccak256("PriceFeedUpdate()");
        // Get slot key from receiver contract
        bytes32 this_this_bindslot_SendUpdate_key = get_SendUpdate_key();
        // Use assembly to bind slot to signal
		assembly {
			mstore(0x40, bindslot(this_bindslot_address, this_bindslot_PriceFeedUpdate_key, this_this_bindslot_SendUpdate_key))
	    }
        //////////////////////////////////////////////////////////////////////////////////////////////////

    }

}
